(()=>{"use strict";var n={402:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"body {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  margin: 0;\n  font-family: 'Roboto', sans-serif;\n  background-color: #cdcdcd;\n}\n\nbutton {\n  padding: 10px 15px;\n  background-color: #3498db;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\nbutton:hover {\n  background-color: #2980b9;\n}\n\n.hidden {\n  visibility: hidden;\n}\n\n.game-container {\n  display: flex;\n  margin-top: 20px;\n  background-color: #ecf0f1;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.game-board {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 10px;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 40px);\n  grid-gap: 5px;\n  margin: 10px;\n}\n\n.cell {\n  box-sizing: border-box;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 12px;\n  border-radius: 5px;\n}\n\n.cell.empty {\n  background-color: #6ddaff;\n}\n\n.cell.ship {\n  background-color: #6a6a6a;\n}\n\n.cell.hit {\n  background-color: #ff5739;\n}\n\n.cell.miss {\n  background-color: #d1f2ff;\n  border: 1px #6ddaff solid;\n}\n\n.cell.valid-place {\n  border: 3px green solid;\n}\n\n.cell.invalid-place {\n  border: 3px red solid;\n}\n\n.turn-indicator {\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 10px;\n  color: #3498db;\n}\n\n.waters-indicator {\n  font-size: 20px;\n  font-weight: bold;\n  margin-bottom: 10px;\n}\n\n#home-waters,\n#enemy-waters {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n#home-waters {\n  margin-right: 15px;\n}\n\n#enemy-waters {\n  margin-left: 15px;\n}\n\n.modal {\n  display: none;\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background: rgba(124, 124, 124, 0.8);\n  backdrop-filter: blur(8px);\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: 10% auto;\n  padding: 20px;\n  border: 1px solid #888;\n  height: 45%;\n  width: 80%;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n  max-width: 800px;\n  max-height: 500px;\n  overflow-y: auto;\n}\n\n.close {\n  color: #aaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n\n.menu-modal {\n  text-align: center;\n}\n\n.menu-modal .button-panel {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 1rem;\n  height: calc(100% - 5rem);\n}\n\n.menu-modal button {\n  width: 40%;\n}\n.menu-modal .new-game-wrapper {\n  display: flex;\n  gap: 1rem;\n  width: 40%;\n}\n\n.menu-modal .new-game-wrapper button {\n  flex: 1 1 max-content;\n  height: 100%;\n}\n\n.dropdown {\n  width: 100%;\n  position: relative;\n  display: flex;\n  justify-content: center;\n}\n\n.dropdown-content {\n  display: none;\n  position: absolute;\n  top: 2rem;\n  background-color: #fff;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  padding: 10px;\n  border-radius: 5px;\n  z-index: 1;\n  min-width: 120px;\n}\n\n.handover-wrapper {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(124, 124, 124, 0.8);\n  backdrop-filter: blur(8px);\n}\n\n.handover-modal {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n  color: white;\n  box-sizing: border-box;\n  padding: 20px;\n  background: #333;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\n}\n\n.handover-message {\n  margin-bottom: 20px;\n}\n\na {\n  color: rgb(0, 44, 94);\n}\n\n.cell:hover {\n  filter: brightness(110%);\n}\n\n@media screen and (max-width: 1023px) {\n  body::before {\n    content: 'Battleships \\a\\a Please play on a computer';\n    white-space: pre;\n    text-align: center;\n    font-size: 24px;\n    font-weight: bold;\n    color: #333;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: #ecf0f1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 9999;\n  }\n}\n","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"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",sourcesContent:["body {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  margin: 0;\n  font-family: 'Roboto', sans-serif;\n  background-color: #cdcdcd;\n}\n\nbutton {\n  padding: 10px 15px;\n  background-color: #3498db;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n}\n\nbutton:hover {\n  background-color: #2980b9;\n}\n\n.hidden {\n  visibility: hidden;\n}\n\n.game-container {\n  display: flex;\n  margin-top: 20px;\n  background-color: #ecf0f1;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.game-board {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 10px;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 40px);\n  grid-gap: 5px;\n  margin: 10px;\n}\n\n.cell {\n  box-sizing: border-box;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 12px;\n  border-radius: 5px;\n}\n\n.cell.empty {\n  background-color: #6ddaff;\n}\n\n.cell.ship {\n  background-color: #6a6a6a;\n}\n\n.cell.hit {\n  background-color: #ff5739;\n}\n\n.cell.miss {\n  background-color: #d1f2ff;\n  border: 1px #6ddaff solid;\n}\n\n.cell.valid-place {\n  border: 3px green solid;\n}\n\n.cell.invalid-place {\n  border: 3px red solid;\n}\n\n.turn-indicator {\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 10px;\n  color: #3498db;\n}\n\n.waters-indicator {\n  font-size: 20px;\n  font-weight: bold;\n  margin-bottom: 10px;\n}\n\n#home-waters,\n#enemy-waters {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n#home-waters {\n  margin-right: 15px;\n}\n\n#enemy-waters {\n  margin-left: 15px;\n}\n\n.modal {\n  display: none;\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background: rgba(124, 124, 124, 0.8);\n  backdrop-filter: blur(8px);\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: 10% auto;\n  padding: 20px;\n  border: 1px solid #888;\n  height: 45%;\n  width: 80%;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n  max-width: 800px;\n  max-height: 500px;\n  overflow-y: auto;\n}\n\n.close {\n  color: #aaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n\n.menu-modal {\n  text-align: center;\n}\n\n.menu-modal .button-panel {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 1rem;\n  height: calc(100% - 5rem);\n}\n\n.menu-modal button {\n  width: 40%;\n}\n.menu-modal .new-game-wrapper {\n  display: flex;\n  gap: 1rem;\n  width: 40%;\n}\n\n.menu-modal .new-game-wrapper button {\n  flex: 1 1 max-content;\n  height: 100%;\n}\n\n.dropdown {\n  width: 100%;\n  position: relative;\n  display: flex;\n  justify-content: center;\n}\n\n.dropdown-content {\n  display: none;\n  position: absolute;\n  top: 2rem;\n  background-color: #fff;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  padding: 10px;\n  border-radius: 5px;\n  z-index: 1;\n  min-width: 120px;\n}\n\n.handover-wrapper {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(124, 124, 124, 0.8);\n  backdrop-filter: blur(8px);\n}\n\n.handover-modal {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n  color: white;\n  box-sizing: border-box;\n  padding: 20px;\n  background: #333;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\n}\n\n.handover-message {\n  margin-bottom: 20px;\n}\n\na {\n  color: rgb(0, 44, 94);\n}\n\n.cell:hover {\n  filter: brightness(110%);\n}\n\n@media screen and (max-width: 1023px) {\n  body::before {\n    content: 'Battleships \\a\\a Please play on a computer';\n    white-space: pre;\n    text-align: center;\n    font-size: 24px;\n    font-weight: bold;\n    color: #333;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: #ecf0f1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 9999;\n  }\n}\n"],sourceRoot:""}]);const A=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var A=0;A<this.length;A++){var l=this[A][0];null!=l&&(i[l]=!0)}for(var c=0;c<n.length;c++){var s=[].concat(n[c]);r&&i[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),t&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=t):s[2]=t),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),e.push(s))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],A=0;A<n.length;A++){var l=n[A],c=r.base?l[0]+r.base:l[0],s=a[c]||0,d="".concat(c," ").concat(s);a[c]=s+1;var p=t(d),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=o(u,r);r.byIndex=A,e.splice(A,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var A=t(a[i]);e[A].references--}for(var l=r(n,o),c=0;c<a.length;c++){var s=t(a[c]);0===e[s].references&&(e[s].updater(),e.splice(s,1))}a=l}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),A=t(565),l=t.n(A),c=t(216),s=t.n(c),d=t(589),p=t.n(d),u=t(402),m={};m.styleTagTransform=p(),m.setAttributes=l(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=s(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;const h={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let f;const g=new Uint8Array(16);function E(){if(!f&&(f="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!f))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return f(g)}const B=[];for(let n=0;n<256;++n)B.push((n+256).toString(16).slice(1));const C=function(n,e,t){if(h.randomUUID&&!e&&!n)return h.randomUUID();const r=(n=n||{}).random||(n.rng||E)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,e){t=t||0;for(let n=0;n<16;++n)e[t+n]=r[n];return e}return function(n,e=0){return B[n[e+0]]+B[n[e+1]]+B[n[e+2]]+B[n[e+3]]+"-"+B[n[e+4]]+B[n[e+5]]+"-"+B[n[e+6]]+B[n[e+7]]+"-"+B[n[e+8]]+B[n[e+9]]+"-"+B[n[e+10]]+B[n[e+11]]+B[n[e+12]]+B[n[e+13]]+B[n[e+14]]+B[n[e+15]]}(r)},b=class{constructor(n,e,t){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:C();this.ID=r,this.homeBoard=n,this.homeBoardID=n.ID,this.enemyBoard=e,this.enemyBoardID=e.ID,this.isAI=t}#n(){const n=[];if(this.enemyBoard.hits.forEach(((e,t)=>{e.forEach(((e,r)=>{null===e&&n.push([t,r])}))})),0===n.length)throw new Error("Enemy board is full");const e=Math.floor(Math.random()*n.length);return n[e]}sendAttack(n,e){const[t,r]=this.isAI?this.#n():[n,e];if(null!==this.enemyBoard.hits[t][r])throw new Error("Cell already attacked");return this.enemyBoard.receiveAttack(t,r),[t,r]}};class y{static size=10;constructor(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:C();this.ID=n,this.grid=Array(y.size).fill(void 0).map((()=>Array(y.size).fill(null))),this.hits=structuredClone(this.grid)}isValidPlacement(n,e,t,r){for(let o=0;o<n.length;o+=1){const n="vertical"===r?e+o:e,a="horizontal"===r?t+o:t;if(n>=y.size||a>=y.size)return!1;if(this.grid[n][a])return!1}return!0}placeShip(n,e,t,r){if(!this.isValidPlacement(n,e,t,r))throw new Error("Invalid ship placement location attempted");for(let o=0;o<n.length;o+=1){const a="vertical"===r?e+o:e,i="horizontal"===r?t+o:t;this.grid[a][i]={ship:n,shipID:n.ID}}}receiveAttack(n,e){this.grid[n][e]?(this.hits[n][e]=!0,this.grid[n][e].ship.hit()):this.hits[n][e]=!1}areAllSunk(){return this.grid.every(((n,e)=>n.every(((n,t)=>!n||this.hits[e][t]))))}}const x=y,v=class{constructor(n){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:C();this.ID=e,this.length=n,this.hits=0,this._isSunk=!1}#e(){return!(this.hits<this.length||(this._isSunk=!0,0))}hit(){this.hits+=1,this.#e()}get isSunk(){return this._isSunk}},w={renderBoards:function(n,e,t){const r=e.querySelectorAll(".board>*"),o=t.querySelectorAll(".board>*");r.forEach((e=>{const[t,r]=w.getCellCoordinates(e);w.markShip(e,n.homeBoard,t,r),w.updateCellType(e,n.homeBoard,t,r)})),o.forEach((e=>{const[t,r]=w.getCellCoordinates(e);w.updateCellType(e,n.enemyBoard,t,r)}))},renderBlankBoards:function(){document.querySelectorAll(".board>*").forEach((n=>{n.classList.remove("ship","hit","miss"),n.classList.add("cell","empty")}))},delegateAttackClick:function(n,e){if(!n.target.classList.contains("cell"))throw new Error("Click was not on a cell");const[t,r]=w.getCellCoordinates(n.target);if(null!==e.enemyBoard.hits[t][r])throw new Error("Cell already attacked");e.enemyBoard.receiveAttack(t,r)},createWaters:function(n,e){for(let t=0;t<e;t+=1)for(let r=0;r<e;r+=1){const e=document.createElement("div");e.classList.add("cell","empty"),e.dataset.r=t,e.dataset.c=r,n.appendChild(e)}},markShip:function(n,e,t,r){n.classList.remove("ship"),e.grid[t][r]&&n.classList.add("ship")},updateCellType:function(n,e,t,r){const o=e.hits[t][r];switch(n.classList.remove("empty","hit","miss"),o){case null:n.classList.add("empty");break;case!0:n.classList.add("hit");break;case!1:n.classList.add("miss")}},getCellCoordinates:function(n){return[parseInt(n.dataset.r,10),parseInt(n.dataset.c,10)]},getCellElement:function(n,e,t){const r=`.cell[data-r="${e}"][data-c="${t}"]`;return n.querySelector(r)},highlightShipPlacement:function(n,e,t){if(!n.target.classList.contains("cell"))return;const r=n.shiftKey?"vertical":"horizontal",[o,a]=w.getCellCoordinates(n.target),i=e.homeBoard.isValidPlacement(t,o,a,r);for(let e=0;e<t.length;e+=1){const t="vertical"===r?o+e:o,A="horizontal"===r?a+e:a,l=w.getCellElement(n.currentTarget.querySelector(".board"),t,A);if(!l)return;l.classList.add(i?"valid-place":"invalid-place")}},clearHighlight:function(n){n.currentTarget.querySelectorAll(".cell.valid-place, .cell.invalid-place").forEach((n=>n.classList.remove("valid-place","invalid-place")))},delegatePlaceClick:function(n,e,t){if(!n.target.classList.contains("cell"))return!1;const r=n.shiftKey?"vertical":"horizontal",[o,a]=w.getCellCoordinates(n.target);return!!e.homeBoard.isValidPlacement(t,o,a,r)&&(e.homeBoard.placeShip(t,o,a,r),!0)},waitForPlacement:function(n){return new Promise(((e,t)=>{const r=document.getElementById("new-game-btn"),o=t=>{n.removeEventListener("click",o),r.removeEventListener("click",a),e(t)},a=()=>{r.removeEventListener("click",a),n.removeEventListener("click",o),t(new Error("Interrupt requested"))};n.addEventListener("click",o),r.addEventListener("click",a)}))},awaitValidPlacement:async function(n,e,t){const r=t=>w.highlightShipPlacement(t,n,e),o=n=>w.clearHighlight(n);for(t.addEventListener("mouseover",r),t.addEventListener("mouseout",o);;)try{const a=await w.waitForPlacement(t);if(w.delegatePlaceClick(a,n,e)){t.removeEventListener("mouseover",r),t.removeEventListener("mouseover",o);break}}catch(n){throw t.removeEventListener("mouseover",r),t.removeEventListener("mouseover",o),n}},waitForAttack:function(n){return new Promise(((e,t)=>{const r=document.getElementById("new-game-btn"),o=t=>{n.removeEventListener("click",o),r.removeEventListener("click",a),e(t)},a=()=>{r.removeEventListener("click",a),n.removeEventListener("click",o),t(new Error("Interrupt requested"))};n.addEventListener("click",o),r.addEventListener("click",a)}))},openHandoverScreen:async function(n,e){await new Promise((e=>{setTimeout(e,n)})),w.renderBlankBoards();const t=document.createElement("div");t.classList.add("handover-wrapper");const r=document.createElement("div");r.classList.add("handover-modal");const o=document.createElement("p");o.classList.add("handover-message"),o.innerText=e;const a=document.createElement("button");return a.classList.add("handover-button"),a.innerText="Click to continue",r.appendChild(o),r.appendChild(a),t.appendChild(r),document.body.appendChild(t),new Promise((n=>{a.addEventListener("click",(()=>{t.remove(),n()}))}))}},k=w,I=async function(n){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const t=document.getElementById("home-waters"),r=document.getElementById("enemy-waters"),o=new x,a=new x,i=new b(o,a,!1),A=new b(a,o,n),l=[new v(5),new v(4),new v(3),new v(3),new v(2)],c=[new v(5),new v(4),new v(3),new v(3),new v(2)];let s=i,d=0;if(e)({turnPlayer:s,turnCounter:d}=function(n,e,t,r,o,a,i){[[e,n.boards.board1],[t,n.boards.board2],[r,n.players.player1],[o,n.players.player2]].forEach((n=>{let[e,t]=n;return Object.assign(e,t)})),[[a,n.ships.player1Ships],[i,n.ships.player2Ships]].forEach((n=>{let[e,t]=n;e.forEach(((n,r)=>Object.assign(e[r],t[r])))})),[[e,a],[t,i]].forEach((n=>{let[e,t]=n;e.grid.forEach((n=>n.forEach((n=>{n&&(n.ship=t.find((e=>e.ID===n.shipID)))}))))})),[r,o].forEach((n=>{["home","enemy"].forEach((r=>{n[`${r}Board`]=[e,t].find((e=>e.ID===n[`${r}BoardID`]))}))}));const A=[r,o].find((e=>e.ID===n.gameplay.turnPlayer.ID)),{turnCounter:l}=n.gameplay;return{turnPlayer:A,turnCounter:l}}(e,o,a,i,A,l,c));else{await k.openHandoverScreen(0,"Time for Admiral 1 to organise their fleet!");for(let n=0;n<l.length;n+=1)try{await k.awaitValidPlacement(i,l[n],t),k.renderBoards(i,t,r)}catch{return}if(A.isAI)for(let n=0;n<c.length;){const e=Math.floor(2*Math.random())?"vertical":"horizontal",t=Math.floor(Math.random()*("vertical"===e?x.size+1-c[n].length:x.size)),r=Math.floor(Math.random()*("horizontal"===e?x.size+1-c[n].length:x.size));try{A.homeBoard.placeShip(c[n],t,r,e),n+=1}catch{}}else{await k.openHandoverScreen(2e3,"Time for Admiral 2 to organise their fleet!"),k.renderBoards(A,t,r);for(let n=0;n<c.length;n+=1)try{await k.awaitValidPlacement(A,c[n],t),k.renderBoards(A,t,r)}catch{return}}}async function p(){const n=await k.waitForAttack(r);try{if(k.delegateAttackClick(n,s),k.renderBoards(s,t,r),s.enemyBoard.areAllSunk())return!0}catch{return!1}return A.isAI?(await new Promise((n=>{setTimeout(n,1e3)})),A.sendAttack(),k.renderBoards(s,t,r),!!s.homeBoard.areAllSunk()):(d+=1,s=d%2?A:i,await k.openHandoverScreen(2e3,`Time for Admiral ${d%2+1}'s next move!`),k.renderBoards(s,t,r),!1)}function u(){const n={gameplay:{turnPlayer:s,turnCounter:d},boards:{board1:o,board2:a},players:{player1:i,player2:A},ships:{player1Ships:l,player2Ships:c}};localStorage.clear(),localStorage.setItem("gameState",JSON.stringify(n))}for(await k.openHandoverScreen(2e3,`Red cells are hits, white cell are misses.\n    \n    Let the game begin!\n    Admiral ${d%2+1}'s turn`),k.renderBoards(s,t,r),window.addEventListener("beforeunload",u);;)try{if(await p()){await k.openHandoverScreen(2e3,`Admiral ${d%2+1} wins!`);break}}catch{break}window.removeEventListener("beforeunload",u)},S={prepareMenu:function(n){const e=document.getElementById("open-options-btn"),t=document.getElementById("close-options-modal"),r=document.getElementById("new-game-btn"),o=document.getElementById("load-game-btn"),a=document.getElementById("info-btn"),i=document.getElementById("player-toggle"),A=document.getElementById("options-modal"),l=document.getElementById("info-modal"),c=document.getElementById("close-info-modal"),s=document.getElementById("no-saved-game-dropdown");function d(n){n.style.display="block"}function p(n){n.style.display="none"}e.addEventListener("click",(()=>d(A))),t.addEventListener("click",(()=>p(A))),r.addEventListener("click",(function(){const e="true"===i.dataset.checked;n(e),localStorage.clear(),p(A)})),o.addEventListener("click",(function(){const e=JSON.parse(localStorage.getItem("gameState"));e?(n(e.players.player2.isAI,e),localStorage.clear(),p(A)):document.getElementById("no-saved-game-dropdown").style.display="block"})),a.addEventListener("click",(()=>d(l))),c.addEventListener("click",(()=>p(l))),s.addEventListener("click",(function(){document.getElementById("no-saved-game-dropdown").style.display="none"})),i.addEventListener("click",(function(){const n="true"===i.dataset.checked;i.textContent=n?"Two player Mode":"Single player Mode",i.dataset.checked=!n})),d(A)}};document.addEventListener("DOMContentLoaded",(()=>{const{size:n}=x,e=document.querySelector("#home-board");k.createWaters(e,n);const t=document.querySelector("#enemy-board");k.createWaters(t,n),S.prepareMenu(I)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,